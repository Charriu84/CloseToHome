#include "CvGameCoreDLL.h"
#include "CyCity.h"
#include "CyPlot.h"
#include "CyArea.h"
#include "CvInfos.h"

//# include <boost/python/manage_new_object.hpp>
//# include <boost/python/return_value_policy.hpp>

//
// published python interface for CyCity
//

void CyCityPythonInterface2(python::class_<CyCity>& x)
{
	OutputDebugString("Python Extension Module - CyCityPythonInterface1\n");

	x
		.def("getMaintenanceModifier", &CyCity::getMaintenanceModifier, "int () - total value of the city maintenance modifier")
		.def("getWarWearinessModifier", &CyCity::getWarWearinessModifier, "int ()")
		.def("getHurryAngerModifier", &CyCity::getHurryAngerModifier, "int ()")
		.def("changeHealRate", &CyCity::changeHealRate, "void (int iChange) - changes the heal rate of this city to iChange")

		.def("getEspionageHealthCounter", &CyCity::getEspionageHealthCounter, "int ()")
		.def("changeEspionageHealthCounter", &CyCity::changeEspionageHealthCounter, "void (int iChange)")
		.def("getEspionageHappinessCounter", &CyCity::getEspionageHappinessCounter, "int ()")
		.def("changeEspionageHappinessCounter", &CyCity::changeEspionageHappinessCounter, "void (int iChange)")

		.def("getFreshWaterGoodHealth", &CyCity::getFreshWaterGoodHealth, "int ()")
		.def("getFreshWaterBadHealth", &CyCity::getFreshWaterBadHealth, "int ()")
		.def("getBuildingGoodHealth", &CyCity::getBuildingGoodHealth, "int ()")
		.def("getBuildingBadHealth", &CyCity::getBuildingBadHealth, "int ()")
		.def("getFeatureGoodHealth", &CyCity::getFeatureGoodHealth, "int () - returns the good health provided by the feature this city is built on")
		.def("getFeatureBadHealth", &CyCity::getFeatureBadHealth, "int () - returns the bad health provided by the feature this city is built on")
		.def("getBuildingHealth", &CyCity::getBuildingHealth, "int (int (BuildingTypes) eBuilding)")
		.def("getPowerGoodHealth", &CyCity::getPowerGoodHealth, "int ()")
		.def("getPowerBadHealth", &CyCity::getPowerBadHealth, "int ()")
		.def("getBonusGoodHealth", &CyCity::getBonusGoodHealth, "int ()")
		.def("getBonusBadHealth", &CyCity::getBonusBadHealth, "int ()")
		.def("getMilitaryHappiness", &CyCity::getMilitaryHappiness, "int () - happiness created by military units stationed in the city")
		.def("getMilitaryHappinessUnits", &CyCity::getMilitaryHappinessUnits, "int ()")
		.def("getBuildingGoodHappiness", &CyCity::getBuildingGoodHappiness, "int ()")
		.def("getBuildingBadHappiness", &CyCity::getBuildingBadHappiness, "int ()")
		.def("getBuildingHappiness", &CyCity::getBuildingHappiness, "int (int (BuildingTypes) eBuilding)")
		.def("getExtraBuildingGoodHappiness", &CyCity::getExtraBuildingGoodHappiness, "int ()")
		.def("getExtraBuildingBadHappiness", &CyCity::getExtraBuildingBadHappiness, "int ()")
		.def("getFeatureGoodHappiness", &CyCity::getFeatureGoodHappiness, "int ()")
		.def("getFeatureBadHappiness", &CyCity::getFeatureBadHappiness, "int ()")
		.def("getBonusGoodHappiness", &CyCity::getBonusGoodHappiness, "int ()")
		.def("getReligionGoodHappiness", &CyCity::getReligionGoodHappiness, "int ()")
		.def("getReligionBadHappiness", &CyCity::getReligionBadHappiness, "int ()")
		.def("getReligionHappiness", &CyCity::getReligionHappiness, "int (int (ReligionTypes) eReligion)")
		.def("getExtraHappiness", &CyCity::getExtraHappiness, "int ()")
		.def("getExtraHealth", &CyCity::getExtraHealth, "int ()")
		.def("changeExtraHealth", &CyCity::changeExtraHealth, "void (int iChange)")
		.def("changeExtraHappiness", &CyCity::changeExtraHappiness, "void (int iChange)")
		.def("getHurryAngerTimer", &CyCity::getHurryAngerTimer, "int () - Anger caused by Hurrying timer")
		.def("changeHurryAngerTimer", &CyCity::changeHurryAngerTimer, "void (int iChange) - adjust Hurry Angry timer by iChange")
		.def("getConscriptAngerTimer", &CyCity::getConscriptAngerTimer, "int () - returns the amount of time left on the conscript anger timer")
		.def("changeConscriptAngerTimer", &CyCity::changeConscriptAngerTimer, "void (int iChange)")
		.def("getDefyResolutionAngerTimer", &CyCity::getDefyResolutionAngerTimer, "int () - returns the amount of time left on the anger timer")
		.def("changeDefyResolutionAngerTimer", &CyCity::changeDefyResolutionAngerTimer, "void (int iChange)")
		.def("flatDefyResolutionAngerLength", &CyCity::flatDefyResolutionAngerLength, "int ()")
		.def("getHappinessTimer", &CyCity::getHappinessTimer, "int () - Temporary Happiness timer")
		.def("changeHappinessTimer", &CyCity::changeHappinessTimer, "void (int iChange) - adjust Happiness timer by iChange")
		.def("isNoUnhappiness", &CyCity::isNoUnhappiness, "bool () - is the city unaffected by unhappiness?")
		.def("isNoUnhealthyPopulation", &CyCity::isNoUnhealthyPopulation, "bool () - is the city unaffected by unhealthiness?")
		.def("isBuildingOnlyHealthy", &CyCity::isBuildingOnlyHealthy, "bool () - is the city ?")

		.def("getFood", &CyCity::getFood, "int () - stored food")
		.def("setFood", &CyCity::setFood, "void (int iNewValue) - set stored food to iNewValue")
		.def("changeFood", &CyCity::changeFood, "void (int iChange) - adjust stored food by iChange")
		.def("getFoodKept", &CyCity::getFoodKept, "int ()")
		.def("getMaxFoodKeptPercent", &CyCity::getMaxFoodKeptPercent, "int ()")
		.def("getOverflowProduction", &CyCity::getOverflowProduction, "int () - value of overflow production")
		.def("setOverflowProduction", &CyCity::setOverflowProduction, "void (int iNewValue) - set overflow production to iNewValue")
		.def("getFeatureProduction", &CyCity::getFeatureProduction, "int () - value of feature production")
		.def("setFeatureProduction", &CyCity::setFeatureProduction, "void (int iNewValue) - set feature production to iNewValue")
		.def("getMilitaryProductionModifier", &CyCity::getMilitaryProductionModifier, "int () - value of adjustments to military production")
		.def("getSpaceProductionModifier", &CyCity::getSpaceProductionModifier, "int ()")
		.def("getExtraTradeRoutes", &CyCity::getExtraTradeRoutes, "int () - returns the number of extra trade routes this city has")
		.def("changeExtraTradeRoutes", &CyCity::changeExtraTradeRoutes, "void (int iChange) - Change the number of trade routes this city has")
		.def("getTradeRouteModifier", &CyCity::getTradeRouteModifier, "int ()")
		.def("getForeignTradeRouteModifier", &CyCity::getForeignTradeRouteModifier, "int ()")
		.def("getBuildingDefense", &CyCity::getBuildingDefense, "int () - building defense")
		.def("getBuildingBombardDefense", &CyCity::getBuildingBombardDefense, "int () - building defense")
		.def("getFreeExperience", &CyCity::getFreeExperience, "int () - # of free experience newly trained units receive")
		.def("getCurrAirlift", &CyCity::getCurrAirlift, "int ()")
		.def("getMaxAirlift", &CyCity::getMaxAirlift, "int ()")
		.def("getAirModifier", &CyCity::getAirModifier, "int () - returns the air defense modifier")
		.def("getAirUnitCapacity", &CyCity::getAirUnitCapacity, "int (int (TeamTypes) eTeam) - returns the number of air units allowed here")
		.def("getNukeModifier", &CyCity::getNukeModifier, "int ()")
		.def("getFreeSpecialist", &CyCity::getFreeSpecialist, "int ()")
		.def("isPower", &CyCity::isPower, "bool ()")
		.def("isAreaCleanPower", &CyCity::isAreaCleanPower, "bool ()")
		.def("isDirtyPower", &CyCity::isDirtyPower, "bool ()")
		.def("getDefenseDamage", &CyCity::getDefenseDamage, "int () - value of damage city defenses can receive")
		.def("changeDefenseDamage", &CyCity::changeDefenseDamage, "void (int iChange) - adjust damage value by iChange")
		.def("isBombardable", &CyCity::isBombardable, "bool (CyUnit* pUnit)")
		.def("getNaturalDefense", &CyCity::getNaturalDefense, "int ()")
		.def("getTotalDefense", &CyCity::getTotalDefense, "int (bool bIgnoreBuilding)")
		.def("getDefenseModifier", &CyCity::getDefenseModifier, "int (bool bIgnoreBuilding)")

		.def("getOccupationTimer", &CyCity::getOccupationTimer, "int () - total # of turns remaining on occupation timer")
		.def("isOccupation", &CyCity::isOccupation, "bool () - is the city under occupation?")
		.def("setOccupationTimer", &CyCity::setOccupationTimer, "void (int iNewValue) - set the Occupation Timer to iNewValue")
		.def("changeOccupationTimer", &CyCity::changeOccupationTimer, "void (int iChange) - adjusts the Occupation Timer by iChange")
		.def("getCultureUpdateTimer", &CyCity::getCultureUpdateTimer, "int () - Culture Update Timer")
		.def("changeCultureUpdateTimer", &CyCity::changeCultureUpdateTimer, "void (int iChange) - adjusts the Culture Update Timer by iChange")
		.def("isNeverLost", &CyCity::isNeverLost, "bool ()")
		.def("setNeverLost", &CyCity::setNeverLost, "void (int iNewValue)")
		.def("isBombarded", &CyCity::isBombarded, "bool ()")
		.def("setBombarded", &CyCity::setBombarded, "void (int iNewValue)")
		.def("isDrafted", &CyCity::isDrafted, "bool ()")
		.def("setDrafted", &CyCity::setDrafted, "void (int iNewValue)")
		.def("isAirliftTargeted", &CyCity::isAirliftTargeted, "bool ()")
		.def("setAirliftTargeted", &CyCity::setAirliftTargeted, "void (int iNewValue)")
		.def("isCitizensAutomated", &CyCity::isCitizensAutomated, "bool () - are citizens under automation?")
		.def("setCitizensAutomated", &CyCity::setCitizensAutomated, "void (bool bNewValue) - set city animation bNewValue")
		.def("isProductionAutomated", &CyCity::isProductionAutomated, "bool () - is production under automation?")
		.def("setProductionAutomated", &CyCity::setProductionAutomated, "void (bool bNewValue) - set city production automation to bNewValue")
		.def("isWallOverride", &CyCity::isWallOverride, "bool ()")
		.def("setWallOverride", &CyCity::setWallOverride, "void (bool bOverride)")
		.def("setCitySizeBoost", &CyCity::setCitySizeBoost, "void (int iBoost)")
		.def("isPlundered", &CyCity::isPlundered, "bool ()")
		.def("setPlundered", &CyCity::setPlundered, "void (bool bNewValue)")
		.def("getOwner", &CyCity::getOwner, "int (PlayerTypes*/ ()")
		.def("getTeam", &CyCity::getTeam, "int (TeamTypes*/ ()")
		.def("getPreviousOwner", &CyCity::getPreviousOwner, "int (PlayerTypes*/ ()")
		.def("getOriginalOwner", &CyCity::getOriginalOwner, "int (PlayerTypes*/ ()")
		.def("getCultureLevel", &CyCity::getCultureLevel, "int (CultureLevelTypes*/ ()")
		.def("getCultureThreshold", &CyCity::getCultureThreshold, "int ()")
		.def("getSeaPlotYield", &CyCity::getSeaPlotYield, "int (int (YieldTypes) eIndex) - total YieldType for water plots")
		.def("getRiverPlotYield", &CyCity::getRiverPlotYield, "int (int (YieldTypes) eIndex) - total YieldType for river plots")

		.def("getBaseYieldRate", &CyCity::getBaseYieldRate, "int (int (YieldTypes) eIndex) - base rate for YieldType")
		.def("setBaseYieldRate", &CyCity::setBaseYieldRate, "void (int (YieldTypes) eIndex, int iNewValue) - sets the base rate for YieldType")
		.def("changeBaseYieldRate", &CyCity::changeBaseYieldRate, "void (int (YieldTypes) eIndex, int iNewValue) - changes the base rate for YieldType")

		.def("getBaseYieldRateModifier", &CyCity::getBaseYieldRateModifier, "int (int (YieldTypes) eIndex, int iExtra)")
		.def("getYieldRate", &CyCity::getYieldRate, "int (int (YieldTypes) eIndex) - total value of YieldType")
		.def("getYieldRateModifier", &CyCity::getYieldRateModifier, "int (int (YieldTypes) eIndex) - yield rate modifier for YieldType")
		.def("getTradeYield", &CyCity::getTradeYield, "int (int (YieldTypes) eIndex) - trade adjustment to YieldType")
		.def("totalTradeModifier", &CyCity::totalTradeModifier, "int () - total trade adjustment")

		.def("calculateTradeProfit", &CyCity::calculateTradeProfit, "int (CyCity* pCity) - returns the trade profit created by CyCity")
		.def("calculateTradeYield", &CyCity::calculateTradeYield, "int (int (YieldTypes) eIndex, int iTradeProfit) - calculates Trade Yield")

		.def("getExtraSpecialistYield", &CyCity::getExtraSpecialistYield, "int (int (YieldTypes) eIndex)")
		.def("getExtraSpecialistYieldOfType", &CyCity::getExtraSpecialistYieldOfType, "int (int (YieldTypes) eIndex, int (SpecialistTypes) eSpecialist)")

		.def("getCommerceRate", &CyCity::getCommerceRate, "int (int (CommerceTypes) eIndex) - total Commerce rate")
		.def("getCommerceRateTimes100", &CyCity::getCommerceRateTimes100, "int (int (CommerceTypes) eIndex) - total Commerce rate")
		.def("getCommerceFromPercent", &CyCity::getCommerceFromPercent, "int (int (CommerceTypes) eIndex, int iYieldRate)")
		.def("getBaseCommerceRate", &CyCity::getBaseCommerceRate, "int (int (CommerceTypes) eIndex)")
		.def("getBaseCommerceRateTimes100", &CyCity::getBaseCommerceRateTimes100, "int (int (CommerceTypes) eIndex)")
		.def("getTotalCommerceRateModifier", &CyCity::getTotalCommerceRateModifier, "int (int (CommerceTypes) eIndex)")
		.def("getProductionToCommerceModifier", &CyCity::getProductionToCommerceModifier, "int (int (CommerceTypes) eIndex) - value of production to commerce modifier")
		.def("getBuildingCommerce", &CyCity::getBuildingCommerce, "int (int (CommerceTypes) eIndex) - total effect of cities buildings on CommerceTypes")
		.def("getBuildingCommerceByBuilding", &CyCity::getBuildingCommerceByBuilding, "int (int (CommerceTypes) eIndex, int (BuildingTypes) iBuilding) - total value of CommerceType from BuildingTypes")
		.def("getSpecialistCommerce", &CyCity::getSpecialistCommerce, "int (int (CommerceTypes) eIndex) - value of CommerceType adjustment from Specialists")
		.def("changeSpecialistCommerce", &CyCity::changeSpecialistCommerce, "void (int (CommerceTypes) eIndex, int iChange) - adjusts Specialist contribution to CommerceType by iChange")
		.def("getReligionCommerce", &CyCity::getReligionCommerce, "int (int (CommerceTypes) eIndex) - effect on CommerceType by Religions")
		.def("getReligionCommerceByReligion", &CyCity::getReligionCommerceByReligion, "int (int (CommerceTypes) eIndex, int (ReligionTypes) eReligion) - CommerceType effect from ReligionType")
		.def("getCorporationCommerce", &CyCity::getCorporationCommerce, "int (int (CommerceTypes) eIndex) - effect on CommerceType by Corporation")
		.def("getCorporationCommerceByCorporation", &CyCity::getCorporationCommerceByCorporation, "int (int (CommerceTypes) eIndex, int (CorporationTypes) eCorporation) - CommerceType effect from CorporationType")
		.def("getCorporationYield", &CyCity::getCorporationYield, "int (int (YieldTypes) eIndex) - effect on YieldTypes by Corporation")
		.def("getCorporationYieldByCorporation", &CyCity::getCorporationYieldByCorporation, "int (int (YieldTypes) eIndex, int (CorporationTypes) eCorporation) - YieldTypes effect from CorporationType")
		.def("getCommerceRateModifier", &CyCity::getCommerceRateModifier, "int (int (CommerceTypes) eIndex) - indicates the total rate modifier on CommerceType")
		.def("getCommerceHappinessPer", &CyCity::getCommerceHappinessPer, "int (int (CommerceTypes) eIndex) - happiness from each level of entertainment")
		.def("getCommerceHappinessByType", &CyCity::getCommerceHappinessByType, "int (int (CommerceTypes) eIndex) - happiness from CommerceType")
		.def("getCommerceHappiness", &CyCity::getCommerceHappiness, "int (int (CommerceTypes) eIndex) - happiness from all CommerceTypes")
		.def("getDomainFreeExperience", &CyCity::getDomainFreeExperience, "int (int (DomainTypes) eIndex)")
		.def("getDomainProductionModifier", &CyCity::getDomainProductionModifier, "int (int (DomainTypes) eIndex)")
		.def("getCulture", &CyCity::getCulture, "int ()")
		.def("getCultureTimes100", &CyCity::getCultureTimes100, "int (int (PlayerTypes) eIndex)")
		.def("countTotalCultureTimes100", &CyCity::countTotalCultureTimes100, "int ()")
		.def("findHighestCulture", &CyCity::findHighestCulture, "PlayerTypes ()")
		.def("calculateCulturePercent", &CyCity::calculateCulturePercent, "int (int (PlayerTypes) eIndex)")
		.def("calculateTeamCulturePercent", &CyCity::calculateTeamCulturePercent, "int (int (TeamTypes) eIndex)")
		.def("setCulture", &CyCity::setCulture, "void (int (PlayerTypes) eIndex, int iNewValue, bool bPlots)")
		.def("setCultureTimes100", &CyCity::setCultureTimes100, "void (int (PlayerTypes) eIndex, int iNewValue, bool bPlots)")
		.def("changeCulture", &CyCity::changeCulture, "void (int iChange)")
		.def("changeCultureTimes100", &CyCity::changeCultureTimes100, "void (int (PlayerTypes) eIndex, int iChange, bool bPlots)")

		.def("isTradeRoute", &CyCity::isTradeRoute, "bool (int (PlayerTypes) eIndex)")
		.def("isEverOwned", &CyCity::isEverOwned, "bool (int (PlayerTypes) eIndex)")

		.def("isRevealed", &CyCity::isRevealed, "bool (int (TeamTypes */eIndex, bool bDebug)")
		.def("setRevealed", &CyCity::setRevealed, "void (int (TeamTypes) eIndex, bool bNewValue)")
		.def("getEspionageVisibility", &CyCity::getEspionageVisibility, "bool (int (TeamTypes */eIndex)")
		.def("getName", &CyCity::getName, "wstring () - city name")
		.def("getNameForm", &CyCity::getNameForm, "wstring (int iForm) - city name")
		.def("getNameKey", &CyCity::getNameKey, "wstring - city name")
		.def("setName", &CyCity::setName, "void (wstring szNewValue, bool bFound) - sets the name to szNewValue")
		.def("isNoBonus", &CyCity::isNoBonus, "bool (int (BonusTypes) eBonus)")
		.def("changeNoBonusCount", &CyCity::changeNoBonusCount, "void (int (BonusTypes) eBonus, int iChange)")
		.def("getFreeBonus", &CyCity::getFreeBonus, "int (int (BonusTypes) eIndex)")
		.def("changeFreeBonus", &CyCity::changeFreeBonus, "void (int (BonusTypes) eIndex, int iChange)")
		.def("getNumBonuses", &CyCity::getNumBonuses, "int (int (BonusTypes) iBonus)")
		.def("hasBonus", &CyCity::hasBonus, "bool (int (BonusTypes */iBonus) - (BonusID) - is BonusID connected to the city?")
		.def("getBuildingProduction", &CyCity::getBuildingProduction, "int (int (BuildingTypes) iBuilding, int iNum) - current production towards BuildingID")
		.def("setBuildingProduction", &CyCity::setBuildingProduction, "void (int (BuildingTypes) iIndex, int iNewValue) - set progress towards BuildingID as iNewValue")
		.def("changeBuildingProduction", &CyCity::changeBuildingProduction, "void (int (BuildingTypes) iIndex, int iChange) - adjusts progress towards BuildingID by iChange")
		.def("getBuildingProductionTime", &CyCity::getBuildingProductionTime, "int (int (BuildingTypes) eIndex)")
		.def("setBuildingProductionTime", &CyCity::setBuildingProductionTime, "void (int (BuildingTypes) eIndex, int iNewValue)")
		.def("changeBuildingProductionTime", &CyCity::changeBuildingProductionTime, "void (int (BuildingTypes) eIndex, int iChange)")
		.def("getBuildingOriginalOwner", &CyCity::getBuildingOriginalOwner, "int (int (BuildingTypes) iIndex) - index of original building owner")
		.def("getBuildingOriginalTime", &CyCity::getBuildingOriginalTime, "int (int (BuildingTypes) iIndex) - original build date")
		.def("getUnitProduction", &CyCity::getUnitProduction, "int (int (UnitTypes) iUnit, int iNum) - gets current production towards UnitID")
		.def("setUnitProduction", &CyCity::setUnitProduction, "void (int iIndex, int iNewValue) - sets production towards UnitID as iNewValue")
		.def("changeUnitProduction", &CyCity::changeUnitProduction, "void (int (UnitTypes) iIndex, int iChange) - adjusts production towards UnitID by iChange")
		.def("getGreatPeopleUnitRate", &CyCity::getGreatPeopleUnitRate, "int (int (UnitTypes) iIndex)")
		.def("getGreatPeopleUnitProgress", &CyCity::getGreatPeopleUnitProgress, "int (int (UnitTypes) iIndex)")
		.def("setGreatPeopleUnitProgress", &CyCity::setGreatPeopleUnitProgress, "void (int (UnitTypes) iIndex, int iNewValue)")
		.def("changeGreatPeopleUnitProgress", &CyCity::changeGreatPeopleUnitProgress, "void (int (UnitTypes) iIndex, int iChange)")
		.def("getSpecialistCount", &CyCity::getSpecialistCount, "int (int (SpecialistTypes) eIndex)")
		.def("alterSpecialistCount", &CyCity::alterSpecialistCount, "void (int (SpecialistTypes) eIndex, int iChange)")
		.def("getMaxSpecialistCount", &CyCity::getMaxSpecialistCount, "int (int (SpecialistTypes) eIndex)")
		.def("isSpecialistValid", &CyCity::isSpecialistValid, "bool (int (SpecialistTypes) eIndex, int iExtra)")
		.def("getForceSpecialistCount", &CyCity::getForceSpecialistCount, "int (int (SpecialistTypes) eIndex)")
		.def("isSpecialistForced", &CyCity::isSpecialistForced, "bool ()")
		.def("setForceSpecialistCount", &CyCity::setForceSpecialistCount, "void (int (SpecialistTypes) eIndex, int iNewValue)")
		.def("changeForceSpecialistCount", &CyCity::changeForceSpecialistCount, "void (int (SpecialistTypes) eIndex, int iChange)")
		.def("getFreeSpecialistCount", &CyCity::getFreeSpecialistCount, "int (int (SpecialistTypes) eIndex)")
		.def("setFreeSpecialistCount", &CyCity::setFreeSpecialistCount, "void (int (SpecialistTypes) eIndex, int iNewValue)")
		.def("changeFreeSpecialistCount", &CyCity::changeFreeSpecialistCount, "void (int (SpecialistTypes) eIndex, int iChange)")
		.def("getAddedFreeSpecialistCount", &CyCity::getAddedFreeSpecialistCount, "int (int (SpecialistTypes) eIndex)")
		.def("getImprovementFreeSpecialists", &CyCity::getImprovementFreeSpecialists, "int (int (ImprovementTypes) iIndex)")
		.def("changeImprovementFreeSpecialists", &CyCity::changeImprovementFreeSpecialists, "void (int (ImprovementTypes) iIndex, int iChange) - adjust ImprovementID free specialists by iChange")
		.def("getReligionInfluence", &CyCity::getReligionInfluence, "int (int (ReligionTypes) iIndex) - value of influence from ReligionID")
		.def("changeReligionInfluence", &CyCity::changeReligionInfluence, "void (int (ReligionTypes) iIndex, int iChange) - adjust ReligionID influence by iChange")

		.def("getCurrentStateReligionHappiness", &CyCity::getCurrentStateReligionHappiness, "int ()")
		.def("getStateReligionHappiness", &CyCity::getStateReligionHappiness, "int (int (ReligionTypes) eIndex)")
		.def("changeStateReligionHappiness", &CyCity::changeStateReligionHappiness, "void (int (ReligionTypes) eIndex, int iChange)")

		.def("getUnitCombatFreeExperience", &CyCity::getUnitCombatFreeExperience, "int (int (UnitCombatTypes) eIndex)")
		.def("getFreePromotionCount", &CyCity::getFreePromotionCount, "int (int (PromotionTypes) eIndex)")
		.def("isFreePromotion", &CyCity::isFreePromotion, "bool (int (PromotionTypes) eIndex)")
		.def("getSpecialistFreeExperience", &CyCity::getSpecialistFreeExperience, "int ()")
		.def("getEspionageDefenseModifier", &CyCity::getEspionageDefenseModifier, "int ()")

		.def("isWorkingPlotByIndex", &CyCity::isWorkingPlotByIndex, "bool (int iIndex) - true if a worker is working this city's plot iIndex")
		.def("isWorkingPlot", &CyCity::isWorkingPlot, "bool (int iIndex) - true if a worker is working this city's pPlot")
		.def("alterWorkingPlot", &CyCity::alterWorkingPlot, "void (int iIndex)")
		.def("getNumRealBuilding", &CyCity::getNumRealBuilding, "int (int (BuildingTypes) iIndex) - get # real building of this type")
		.def("setNumRealBuilding", &CyCity::setNumRealBuilding, "void (int (BuildingTypes) iIndex, int iNewValue) - Sets number of buildings in this city of BuildingID type")
		.def("getNumFreeBuilding", &CyCity::getNumFreeBuilding, "int (int (BuildingTypes) iIndex) - # of free Building ID (ie: from a Wonder)")
		.def("isHasReligion", &CyCity::isHasReligion, "bool (int (ReligionTypes) iIndex) - does city have ReligionID?")
		.def("setHasReligion", &CyCity::setHasReligion, "void (int (ReligionTypes) iIndex, bool bNewValue, bool bAnnounce, bool bArrows) - religion begins to spread")
		.def("isHasCorporation", &CyCity::isHasCorporation, "bool (int (CorporationTypes) iIndex) - does city have CorporationID?")
		.def("setHasCorporation", &CyCity::setHasCorporation, "void (int (CorporationTypes) iIndex, bool bNewValue, bool bAnnounce, bool bArrows) - corporation begins to spread")
		.def("isActiveCorporation", &CyCity::isActiveCorporation, "bool (int (CorporationTypes) eCorporation) - does city have active CorporationID?")
		.def("getTradeCity", &CyCity::getTradeCity, python::return_value_policy<python::manage_new_object>(), "CyCity* (int iIndex) - remove SpecialistType[iIndex]")
		.def("getTradeRoutes", &CyCity::getTradeRoutes, "int ()")

		.def("clearOrderQueue", &CyCity::clearOrderQueue, "void ()")
		.def("pushOrder", &CyCity::pushOrder, "void (OrderTypes eOrder, int iData1, int iData2, bool bSave, bool bPop, bool bAppend, bool bForce)")
		.def("popOrder", &CyCity::popOrder, "void (int iNum, bool bFinish, bool bChoose)")
		.def("getOrderQueueLength", &CyCity::getOrderQueueLength, "int ()")
		.def("getOrderFromQueue", &CyCity::getOrderFromQueue, python::return_value_policy<python::manage_new_object>(), "OrderData* (int iIndex)")

		.def("setWallOverridePoints", &CyCity::setWallOverridePoints, "void (const tuple kPoints)")
		.def("getWallOverridePoints", &CyCity::getWallOverridePoints, "tuple getWallOverridePoints()")

		.def("AI_avoidGrowth", &CyCity::AI_avoidGrowth, "bool ()")
		.def("AI_isEmphasize", &CyCity::AI_isEmphasize, "bool (int iEmphasizeType)")
		.def("AI_countBestBuilds", &CyCity::AI_countBestBuilds, "int (CyArea* pArea)")
		.def("AI_cityValue", &CyCity::AI_cityValue, "int ()")

		.def("getScriptData", &CyCity::getScriptData, "string getScriptData() - Get stored custom data (via pickle)")
		.def("setScriptData", &CyCity::setScriptData, "void (string szNewValue) - Set stored custom data (via pickle)")

		.def("visiblePopulation", &CyCity::visiblePopulation, "int (void)")

		.def("getBuildingYieldChange", &CyCity::getBuildingYieldChange, "int (int (BuildingClassTypes) eBuildingClass, int (YieldTypes) eYield)")
		.def("setBuildingYieldChange", &CyCity::setBuildingYieldChange, "void (int (BuildingClassTypes) eBuildingClass, int (YieldTypes) eYield, int iChange)")
		.def("getBuildingCommerceChange", &CyCity::getBuildingCommerceChange, "int (int (BuildingClassTypes) eBuildingClass, int (CommerceTypes) eCommerce)")
		.def("setBuildingCommerceChange", &CyCity::setBuildingCommerceChange, "void (int (BuildingClassTypes) eBuildingClass, int (CommerceTypes) eCommerce, int iChange)")
		.def("getBuildingHappyChange", &CyCity::getBuildingHappyChange, "int (int (BuildingClassTypes) eBuildingClass)")
		.def("setBuildingHappyChange", &CyCity::setBuildingHappyChange, "void (int (BuildingClassTypes) eBuildingClass, int iChange)")
		.def("getBuildingHealthChange", &CyCity::getBuildingHealthChange, "int (int (BuildingClassTypes) eBuildingClass)")
		.def("setBuildingHealthChange", &CyCity::setBuildingHealthChange, "void (int (BuildingClassTypes) eBuildingClass, int iChange)")

		.def("getLiberationPlayer", &CyCity::getLiberationPlayer, "int (bool bConquest)")
		.def("liberate", &CyCity::liberate, "void (bool bConquest)")
		;
}

